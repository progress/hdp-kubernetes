apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-{{ .Values.hdp.services.hdpService.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Release.Name }}-{{ .Values.hdp.services.hdpService.name }}
  replicas: {{ .Values.hdp.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: hdp-server-app
  template:
    metadata:
      labels:
        app: hdp-server-app
        date: "{{ now | unixEpoch }}"
    spec:
      initContainers:
      - name: init-properties
        image: "{{.Values.hdp.image.repository}}:{{.Values.hdp.image.tag}}"
        imagePullPolicy: {{.Values.hdp.image.pullPolicy}}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: {{.Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
          runAsNonRoot: {{.Values.hdp.containerSecurityContext.runAsNonRoot }}
          runAsUser: 12321
          runAsGroup: 100
          capabilities:
            drop:
              - ALL
          seccompProfile:
            type: RuntimeDefault
        {{- if .Values.hdpingressconfiguration.tls.enabled }}
        {{- if .Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
        command: ["/bin/sh", "-c", "cp -Rv /home/hdpuser/Progress /app; mkdir -p /hdpshare && cp /hdpprops/*.properties /hdpshare/ && echo \'Config Map mounted and properties file copied to /hdpshare!\'; cat /certs/tls.crt /certs/tls.key > /hdpshare/hdp-cert.pem && echo \'Certificate copied to /hdpshare!\'"]
        {{- else }}
        command: ["/bin/sh", "-c", "mkdir -p /hdpshare && cp /hdpprops/*.properties /hdpshare/ && echo \'Config Map mounted and properties file copied to /hdpshare!\'; cat /certs/tls.crt /certs/tls.key > /hdpshare/hdp-cert.pem && echo \'Certificate copied to /hdpshare!\'"]
        {{- end }}
        {{- else }}
        {{- if .Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
        command: ["/bin/sh", "-c", "cp -Rv /home/hdpuser/Progress /app; mkdir -p /hdpshare && cp /hdpprops/*.properties /hdpshare/ && echo \'Config Map mounted and properties file copied to /hdpshare!\'"]
        {{- else }}
          command: ["/bin/sh", "-c", "mkdir -p /hdpshare && cp /hdpprops/*.properties /hdpshare/ && echo \'Config Map mounted and properties file copied to /hdpshare!\'"]
        {{- end }}
        {{- end }}
        volumeMounts:
        {{- if .Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
        - name: hdp-app
          mountPath: /app
        {{- end }}  
        - name: properties
          mountPath: /hdpprops
        {{- if .Values.hdpingressconfiguration.tls.enabled }}
        - name: certs
          mountPath: /certs
        {{- end }}  
        - name: shared-storage-volume
          mountPath: /hdpshare
      containers:
        - name: hdp-server
          image: "{{.Values.hdp.image.repository}}:{{.Values.hdp.image.tag}}"
          imagePullPolicy: {{.Values.hdp.image.pullPolicy}}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: {{.Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
            runAsNonRoot: {{.Values.hdp.containerSecurityContext.runAsNonRoot }}
            runAsUser: 12321
            runAsGroup: 100
            capabilities:
                drop:   
                 - ALL    
            seccompProfile:
              type: RuntimeDefault
          {{- if .Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
          command: ["/bin/sh", "-c", "${HDP_INSTALL_HOME}/Progress/DataDirect/scripts/startup.sh"]
          {{- end }}
          ports:
            - name: hdpserver
              containerPort: {{.Values.hdp.ports.hdpServer.port}}
            - name: opaccessor
              containerPort: {{.Values.hdp.ports.opAccessor.port}}
            - name: notification
              containerPort: {{.Values.hdp.ports.notificationServer.port}}
            - name: internal
              containerPort: 8190
          env:
          {{- if .Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
            - name: HDP_INSTALL_HOME
              value: /app
          {{- end }}
            - name: ACCEPT_EULA
              value: "{{.Values.hdp.eula.accepted}}"
            - name: HDP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hdp-secrets
                  key: hdp-admin-password
            - name: HDP_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hdp-secrets
                  key: hdp-user-password
            - name: HDP_DATABASE_ADMIN
              valueFrom:
                secretKeyRef:
                  name: hdp-secrets
                  key: account-database-admin-username
            - name: HDP_DATABASE_ADMIN_PASSWORD 
              valueFrom:
                secretKeyRef:
                  name: hdp-secrets
                  key: account-database-admin-password
            - name: HDP_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: hdp-secrets
                  key: account-database-user-username
            - name: HDP_DATABASE_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hdp-secrets
                  key: account-database-user-password
            - name: HDP_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: hdp-secrets
                  key: hdp-license-key
          volumeMounts:
          {{- if .Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
          - name: hdp-app
            mountPath: /app
          - name: driver-schema-cache
            mountPath: /home/hdpuser
          - name: jvm-perf-cache
            mountPath: /tmp
          {{- end }}  
          - name: properties
            mountPath: /hdpprops
          - name: shared-storage-volume
            mountPath: {{ .Values.hdp.persistence.keystore.mountPath }}
          {{- if .Values.hdp.persistence.logs.enabled }}
          - name: logs-storage-volume
            mountPath: {{ .Values.hdp.persistence.logs.mountPath }}
          {{- end }}
          {{- if .Values.hdp.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: {{.Values.hdp.ports.hdpServer.port}}
            initialDelaySeconds: {{ .Values.hdp.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hdp.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.hdp.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.hdp.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.hdp.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.hdp.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: {{.Values.hdp.ports.hdpServer.port}}
            initialDelaySeconds: {{ .Values.hdp.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hdp.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.hdp.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.hdp.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.hdp.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.hdp.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /
              port: {{.Values.hdp.ports.hdpServer.port}}
            initialDelaySeconds: {{ .Values.hdp.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hdp.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.hdp.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.hdp.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.hdp.startupProbe.successThreshold }}
          {{- end }}
          resources:
            requests:
              memory: {{.Values.hdp.resources.requests.memory}}
              cpu: {{.Values.hdp.resources.requests.cpu}}
            limits:
              memory: {{.Values.hdp.resources.limits.memory}}
              cpu: {{.Values.hdp.resources.limits.cpu}}            
      volumes:
        {{- if .Values.hdp.containerSecurityContext.readOnlyRootFilesystem }}
        - name: hdp-app
          emptyDir: {}
        - name: driver-schema-cache
          emptyDir:
            medium: Memory
        - name: jvm-perf-cache
          emptyDir:
            medium: Memory
        {{- end }}    
        - name: shared-storage-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-shared-storage-volume
        {{- if .Values.hdp.persistence.logs.enabled }}
        - name: logs-storage-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-logs-storage-volume
        {{- end }}
        - name: properties
          projected: 
            sources:
              - configMap:
                  name: {{ .Release.Name }}-configmap
              {{- if .Values.hdp.persistence.logs.enabled }}
              - configMap:
                  name: {{ .Release.Name }}-logging-properties-configmap
              {{- end }}
        {{- if .Values.hdpingressconfiguration.tls.enabled }}
        - name: certs
          secret:
            secretName: {{ .Values.hdpingressconfiguration.tls.secretName }}
        {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
