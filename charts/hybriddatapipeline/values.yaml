## Progress DataDirect Hybrid Data Pipeline Helm Chart Manifest

## Copyright 2025 Progress Software Corporation and/or its 
## subsidiaries or affiliates. All Rights Reserved.

## @section Hybrid Data Pipeline (HDP) parameters
##
hdp:
  ## @param hdp.replicaCount The number of HDP server nodes to be deployed
  ##
  replicaCount: 2
  ## @param hdp.image.repository The fully qualified name of the registry login server and the name of HDP Docker image
  ## @param hdp.image.tag The four digit tag used to identify a version of the Docker image
  ## @param hdp.image.pullPolicy The policy for pulling the Docker image
  ##
  image:
    repository: 
    tag: 
    pullPolicy: IfNotPresent
  ## @param hdp.imagePullSecrets An array of secrets used to authenticate with the Docker registry
  ##
  imagePullSecrets: []
  ## @param hdp.licenseKey The HDP server license Key.
  ## @note Leave this empty to install HDP in evaluation mode.
  ##
  licenseKey: 
  ## @param hdp.loadbalancer.hostName The name of the DNS record set used for external access to the HDP server
  ##
  loadbalancer:
    hostName: 
  ## @param hdp.onPremiseConnector.enabled The parameter for enabling the On-Premises Connector
  ##
  onPremiseConnector:
    enabled: true
  ## @param hdp.fips.enabled The parameter for enabling FIPS mode for the HDP server
  ##
  fips:
    enabled: true
  ## @param hdp.proxy.ipAddresses A proxy IP address or list of proxy IP addresses separated by
  ## the '|' character.
  ##
  proxy:
    ipAddresses: 
  ## @param hdp.ports.hdpServer.port The external port on which the HDP server is exposed
  ## @param hdp.ports.hdpServer.targetPort The internal port on which the application container is listening for the HDP service
  ## @param hdp.ports.opAccessor.port The external port on which the On-Premises Access service is exposed
  ## @param hdp.ports.opAccessor.targetPort The internal port on which the application container is listening for the On-Premises Access service
  ## @param hdp.ports.notificationServer.port The external port on which the Notification Server is exposed
  ## @param hdp.ports.notificationServer.targetPort The internal port on which the application container is listening for the Notification Server
  ##
  ports:
    hdpServer:
      port: 8080
      targetPort: 8080
    opAccessor:
      port: 40501
      targetPort: 40501
    notificationServer:
      port: 11280
      targetPort: 11280
  ## @param hdp.database.postgres.enabled The configuration for enabling the deployment of a PostgreSQL system database
  ## @param hdp.database.postgres.hostName The hostname of the PostgreSQL database
  ## @param hdp.database.postgres.port The port number of the PostgreSQL database
  ## @param hdp.database.postgres.schemaName The name of the system database schema in the PostgreSQL database
  ## @param hdp.database.postgres.databaseName The name of the PostgreSQL database
  ## @param hdp.database.postgres.advancedOptions PostgreSQL Additional configurations for the PostgreSQL database
  ##
  database:
    postgres:
      enabled: true
      hostName: postgresql
      port: 5432
      schemaName: hdp
      databaseName: hdp
      advancedOptions: 
  ## @param hdp.persistence.mountPath The directory path within the container where the persistent volume will be mounted
  ## @param hdp.persistence.size The size of the persistent volume to be requested
  ## @param hdp.persistence.storageClassName The name of the StorageClass to be used for the persistent volume
  ##
  persistence:    
    mountPath: /hdpshare
    size: 1Gi
    storageClassName: 
  ## @param hdp.resources.requests.memory The minimum RAM for the server container
  ## @param hdp.resources.requests.cpu The minimum CPU for the server container
  ## @param hdp.resources.limits.memory The maximum RAM for the server container
  ## @param hdp.resources.limits.cpu The maximum CPU for the server container
  ##
  resources:
    requests:
      memory: "4096Mi"
      cpu: "2000m"
    limits:
      memory: "4096Mi"
      cpu: "2000m"  
  ## @param hdp.livenessProbe.enabled The parameter for enabling the container liveness probe
  ## @param hdp.livenessProbe.initialDelaySeconds The number of seconds after the container has started before the liveness probe is initiated
  ## @param hdp.livenessProbe.periodSeconds The frequency in seconds that Kubernetes performs the liveness check
  ## @param hdp.livenessProbe.timeoutSeconds The number of seconds after which the liveness probe times out
  ## @param hdp.livenessProbe.failureThreshold The number of consecutive failures required for the liveness probe to be considered failed
  ## @param hdp.livenessProbe.successThreshold The number of consecutive successes required for the liveness probe to be considered successful
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  ## @param hdp.readinessProbe.enabled The parameter for enabling the container readiness probe
  ## @param hdp.readinessProbe.initialDelaySeconds The number of seconds after the container has started before the readiness probe is initiated
  ## @param hdp.readinessProbe.periodSeconds The frequency in seconds that Kubernetes performs the readiness check
  ## @param hdp.readinessProbe.timeoutSeconds The number of seconds after which the readiness probe times out
  ## @param hdp.readinessProbe.failureThreshold The number of consecutive failures required for the readiness probe to be considered failed
  ## @param hdp.readinessProbe.successThreshold The number of consecutive successes required for the readiness probe to be considered successful
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  ## @param hdp.startupProbe.enabled The parameter for enabling the container startup probe
  ## @param hdp.startupProbe.initialDelaySeconds The number of seconds after the container has started before the startup probe is initiated
  ## @param hdp.startupProbe.periodSeconds The frequency in seconds that Kubernetes performs the startup check
  ## @param hdp.startupProbe.timeoutSeconds The number of seconds after which the startup probe times out
  ## @param hdp.startupProbe.failureThreshold The number of consecutive failures required for the startup probe to be considered failed
  ## @param hdp.startupProbe.successThreshold The number of consecutive successes required for the startup probe to be considered successful
  ##
  startupProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
  ## @param hdp.services.hdpService.name The name of the Hybrid Data Pipeline service
  ## @param hdp.services.hdpService.check The parameter for enabling a health check against the server
  ## @param hdp.services.hdpService.checkInterval The frequency of the health check
  ## @param hdp.services.hdpService.checkPath The check path for the server
  ## @param hdp.services.opAccessorService.name The name of the On-Premises Access service
  ## @param hdp.services.opAccessorService.check The parameter for enabling a health check against On-Premises Access service
  ## @param hdp.services.opAccessorService.checkInterval The frequency of the health check
  ## @param hdp.services.opAccessorService.checkPath The check path for the On-Premises Access service
  ## @param hdp.services.opAccessorService.aclPath The ACL path for the On-Premises Access service
  ## @param hdp.services.notificationService.name The name of the Notification Server service
  ## @param hdp.services.notificationService.check The parameter for enabling a health check against the Notification Server service
  ## @param hdp.services.notificationService.checkInterval The frequency of the health check
  ## @param hdp.services.notificationService.checkPath The check path for the Notification Server service
  ## @param hdp.services.notificationService.aclPath The ACL path for the Notification Server service
  ##
  services:
    hdpService:
      name: hdpserver
      check: "true"
      checkInterval: 5m
      checkPath: /api/healthcheck
    opAccessorService:
      name: opaccessor
      check: "true"
      checkInterval: 5m
      checkPath: /
      aclPath: /connect/opa
    notificationService:
      name: notificationserver
      check: "true"
      checkInterval: 5m
      checkPath: /
      aclPath: /connect/X_DataDirect_Notification_Server

## @section HAProxy parameters The parameters for configuring the HAProxy Kubernetes ingress
##
haproxy:
  ## @param haproxy.kubernetesIngress.enabled The parameter for enabling HAProxy as an ingress controller
  ## @param haproxy.kubernetesIngress.ingressName The name of the ingress resource that will be created and managed
  ##
  kubernetesIngress:
    enabled: true
    ingressName: "hdp-ingress"
  ## @param haproxy.tls.enabled The parameter for enabling TLS for the ingress resource
  ## @param haproxy.tls.secretName The name of the Kubernetes Secret that contains the TLS certificate and private key
  ## @note The PEM-formatted SSL certificate and private key must be used to create a Kubernetes secret
  ## @example: kubectl create secret tls tls-cert --cert=mycert.pem --key=privkey.pem
  ## @note The name of the secret must be specified with the secretName parameter
  ##
  tls:
    enabled: false
    secretName: ""

## @section Kubernetes ingress controller parameters The parameters for configuring the Kubernetes ingress controller
##
kubernetesingress:
  ## @param kubernetesingress.controller.ingressClass The ingress class to be used by the ingress controller
  ## @param kubernetesingress.controller.service.type The type of Kubernetes service to be created for the ingress controller
  ## @param kubernetesingress.controller.service.externalTrafficPolicy How external traffic is handled
  ## @note When set to Local, the traffic is only routed to the nodes where the ingress controller pods are running
  ## @param kubernetesingress.controller.annotations.service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path An annotation that configures the Azure Load Balancer to use the "/healthz" path for health probes
  ## @note Annotations are key-value pairs that provide additional configuration options for the service.Azure Load Balancer health probe request path
  ##
  controller:
    ingressClass: haproxy
    service:
      type: "LoadBalancer"
      externalTrafficPolicy: Local
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: "/healthz"

## @section PostgreSQL Helm chart parameters The parameters for configuring the PostgreSQL Helm chart
##
postgresql:
  ## @param postgresql.global.postgresql.auth.existingSecret The name of an existing Kubernetes Secret that contains the authentication credentials for the PostgreSQL system database
  ## @param postgresql.global.postgresql.auth.secretKeys.adminPasswordKey The key in the existing Secret that contains the admin password for PostgreSQL
  ##
  global:
    postgresql:
      auth:
        existingSecret: "account-database-secrets"
        secretKeys:
          adminPasswordKey: "privileged-database-password"
  ## @param postgresql.primary.fullname The full name of the primary PostgreSQL instance
  ## @param postgresql.primary.initdb.scriptsSecret The name of the Kubernetes Secret that contains initialization scripts for PostgreSQL
  ##
  primary:
    fullname: "postgresql"
    initdb:
      scriptsSecret: "postgres-initsql"