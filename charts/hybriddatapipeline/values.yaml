## Values for Progress DataDirect Hybrid Data Pipeline(HDP) Server Deployment

## Values used for Hybrid Data Pipeline(HDP) installation
hdp:
  
  ## Controls number of nodes to be deployed
  replicaCount: 2

  ## HDP Docker image details
  image:
    repository: 
    tag: 
    pullPolicy: IfNotPresent
  imagePullSecrets: []

  ## HDP Server License Key, leave this blank to install HDP in Evaluation Mode
  licenseKey: 

  ## Hybrid Data Pipeline Server Container load balancer hostname
  loadbalancer:
    hostName: 

  ## Controls On-Premise Connector components configuration on the HDP Server side
  ## This should be enabled to establish On-premise datastore connections
  onPremiseConnector:
    enabled: true

  ## Controls FIPS configuration on the HDP Server side
  ## This should be enabled to run Hybrid Data Pipeline in FIPS mode
  fips:
    enabled: true
  
  ## Configure the Proxy related IP addresses on the HDP Server side
  ## The IP address(es) should be separated by '|' character
  proxy:
    ipAddresses: 
    
  ## HDP Server ports
  ports:
    hdpServer:
      port: 8080
      targetPort: 8080
    opAccessor:
      port: 40501
      targetPort: 40501
    notificationServer:
      port: 11280
      targetPort: 11280

  ## HDP Account database details, by default PostgreSQL is configured as account database
  database:
    postgres:
      enabled: true
      hostName: postgresql
      port: 5432
      schemaName: hdp
      databaseName: hdp
      advancedOptions: 

  ## HDP Server Container storage parameters
  persistence:    
    mountPath: /hdpshare
    size: 1Gi
    storageClassName: 

  ## HDP Server Container resources parameters
  resources:
    requests:
      memory: "4096Mi"
      cpu: "2000m"
    limits:
      memory: "4096Mi"
      cpu: "2000m"
  
  ## HDP Server Container probe parameters
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  startupProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  ## HDP Server Container services
  services:
    hdpService:
      name: hdpserver
      check: "true"
      checkInterval: 5m
      checkPath: /api/healthcheck
    opAccessorService:
      name: opaccessor
      check: "true"
      checkInterval: 5m
      checkPath: /
      aclPath: /connect/opa
    notificationService:
      name: notificationserver
      check: "true"
      checkInterval: 5m
      checkPath: /
      aclPath: /connect/X_DataDirect_Notification_Server

## HAProxy Kubneretes Ingress Helm Chart Configuration
haproxy:
  kubernetesIngress:
    enabled: true
    ingressName: "hdp-ingress"
  ## Configure TLS for HAProxy
  ## Put the PEM-formatted SSL certificate and private key into a secret and provide the secret name in the secretName field.
  ## To generate the secret in Kubernetes: kubectl create secret tls tls-cert --cert=mycert.pem --key=privkey.pem
  tls:
    enabled: false
    secretName: ""

## Kubneretes Ingress Controller Configuration
kubernetesingress:
  controller:
    ingressClass: haproxy
    service:
      type: "LoadBalancer"
      externalTrafficPolicy: Local
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: "/healthz"

## PostgreSQL Helm Chart Configuration
postgresql:
  global:
    postgresql:
      auth:
        existingSecret: "account-database-secrets"
        secretKeys:
          adminPasswordKey: "privileged-database-password"
  primary:
    fullname: "postgresql"
    initdb:
      scriptsSecret: "postgres-initsql"

